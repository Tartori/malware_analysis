import json
from pprint import pprint
import sys

print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))

hooksfile = ""
malfindfile = ""
vadfile = ""


for arg in sys.argv:
    if arg.startswith("--hooks="):
        hooksfile = arg.replace("--hooks=", "")
    elif arg.startswith("--malfind="):
        malfindfile = arg.replace("--malfind=", "")
    elif arg.startswith("--vad="):
        vadfile = arg.replace("--vad=", "")
    elif arg == sys.argv[0]:
        continue
    else:
        print("invalid argument " + arg)


print(hooksfile)
print(malfindfile)
print(vadfile)


with open(malfindfile) as f:
    malfinddata = json.load(f)

with open(hooksfile) as f:
    hooksdata = json.load(f)

with open(vadfile) as f:
    vaddata = json.load(f)


malfindprocs = {}
malfindpid = 1
for find in malfinddata["rows"]:
    if(find[malfindpid] in malfindprocs):
        proclist = malfindprocs[find[malfindpid]]
    else:
        proclist = []
    proclist.append(find)
    malfindprocs[find[malfindpid]] = proclist


vadprocs = {}
vadpid = 0
for find in vaddata["rows"]:
    if(find[vadpid] in vadprocs):
        proclist = vadprocs[find[vadpid]]
    else:
        proclist = []
    proclist.append(find)
    vadprocs[find[vadpid]] = proclist

malfindregions = {}

malfind_memory_address = 2
vad_memory_start = 2
vad_memory_end = 3

for pid in malfindprocs:
    malfindprocdata = malfindprocs[pid]
    vadprocdata = vadprocs[pid]
    proc = {}
    proc[pid] = pid
    proc["regions"] = []
    for malfindentry in malfindprocdata:
        region = {}
        region["data"] = malfindentry
        region["start"] = malfindentry[malfind_memory_address]
        for vadentry in vadprocdata:
            if vadentry[vad_memory_start] == region["start"]:
                region["end"] = vadentry[vad_memory_end]
        proc["regions"].append(region)
    malfindregions[pid] = proc


hook_address_location = 8
hook_pid_location = 3

finds = []
hooks = []

findspp = {}

for hook in hooksdata["rows"]:
    hookaddress = hook[hook_address_location]
    hookpid = hook[hook_pid_location]
    if tuple(hook) in hooks:
        continue
    hooks.append(tuple(hook))
    if hookpid in malfindregions:
        regions = malfindregions[hookpid]["regions"]
        for region in regions:
            if region["start"] < hookaddress < region["end"]:
                finds.append(
                    {"hook": hook, "malfind": region["data"], "region": region})
                if not hookpid in findspp:
                    findspp[hookpid] = 0
                findspp[hookpid] += 1

print("found " + str(len(finds)))
print("total " + str(len(hooksdata["rows"])))

pprint(findspp)
