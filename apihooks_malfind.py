#!/usr/bin/env python3
"""
This script compares the output of the commands apihooks malfind and vadinfo
of volatility. When comparing the output we can determine sections of the

To get the information required, execute the following commands on the image:
volatility -f $image --profile $profile apihooks --output=json --output-file=apihooks.json
volatility -f $image --profile $profile malfind --output=json --output-file=malfind.json
volatility -f $image --profile $profile vadinfo --output=json --output-file=vadinfo.json


Usage:
    apihooks_malfind.py --hooks=<apihooks> --malfind=<malfind> --vad=<vadinfo>

Options:
    <apihooks>        JSON output of volatility apihooks command
    <malfind>         JSON output of volatility malfind command
    <vadinfo>         JSON output of volatility vadinfo command
"""

import json
from pprint import pprint
import sys

print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))

apihooks = ""
malfind = ""
vadinfo = ""

for arg in sys.argv:
    if arg.startswith("--hooks="):
        apihooks = arg.replace("--hooks=", "")
    elif arg.startswith("--malfind="):
        malfind = arg.replace("--malfind=", "")
    elif arg.startswith("--vad="):
        vadinfo = arg.replace("--vad=", "")
    elif arg == sys.argv[0]:
        continue
    else:
        print("invalid argument " + arg)

print(apihooks)
print(malfind)
print(vadinfo)

with open(malfind) as f:
    malfinddata = json.load(f)

with open(apihooks) as f:
    hooksdata = json.load(f)

with open(vadinfo) as f:
    vaddata = json.load(f)

malfindprocs = {}
malfindpid = 1
for find in malfinddata["rows"]:
    if(find[malfindpid] in malfindprocs):
        proclist = malfindprocs[find[malfindpid]]
    else:
        proclist = []
    proclist.append(find)
    malfindprocs[find[malfindpid]] = proclist

vadprocs = {}
vadpid = 0
for find in vaddata["rows"]:
    if(find[vadpid] in vadprocs):
        proclist = vadprocs[find[vadpid]]
    else:
        proclist = []
    proclist.append(find)
    vadprocs[find[vadpid]] = proclist

malfindregions = {}

malfind_memory_address = 2
vad_memory_start = 2
vad_memory_end = 3

for pid in malfindprocs:
    malfindprocdata = malfindprocs[pid]
    vadprocdata = vadprocs[pid]
    proc = {}
    proc[pid] = pid
    proc["regions"] = []
    for malfindentry in malfindprocdata:
        region = {}
        region["data"] = malfindentry
        region["start"] = malfindentry[malfind_memory_address]
        for vadentry in vadprocdata:
            if vadentry[vad_memory_start] == region["start"]:
                region["end"] = vadentry[vad_memory_end]
        proc["regions"].append(region)
    malfindregions[pid] = proc


hook_address_location = 8
hook_pid_location = 3

finds = []
hooks = []

findspp = {}

for hook in hooksdata["rows"]:
    hookaddress = hook[hook_address_location]
    hookpid = hook[hook_pid_location]
    if tuple(hook) in hooks:
        continue
    hooks.append(tuple(hook))
    if hookpid in malfindregions:
        regions = malfindregions[hookpid]["regions"]
        for region in regions:
            if region["start"] < hookaddress < region["end"]:
                finds.append(
                    {"hook": hook, "malfind": region["data"], "region": region})
                if not hookpid in findspp:
                    findspp[hookpid] = 0
                findspp[hookpid] += 1

print("found " + str(len(finds)))
print("total " + str(len(hooksdata["rows"])))

pprint(findspp)
